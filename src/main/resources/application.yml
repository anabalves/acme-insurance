spring:
  application:
    name: acme-insurance

  datasource:
    url: jdbc:postgresql://${DB_HOST}:5432/db_acme_insurance
    username: ${DB_USER}
    password: ${DB_PASS}

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
      auto-offset-reset: earliest

  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379

  cloud:
    openfeign:
      okhttp:
        enabled: true
      client:
        config:
          default:
            connectTimeout: 5000
            readTimeout: 5000
            loggerLevel: FULL

acme:
  insurance:
    cache-ttl-seconds:
      catalog-product: ${CATALOG_PRODUCT_API_CACHE_TTL}
      catalog-offer: ${CATALOG_OFFER_API_CACHE_TTL}
  kafka:
    topics:
      quotation-created: ${KAFKA_TOPIC_QUOTATION_CREATED}
      policy-issued: ${KAFKA_TOPIC_POLICY_ISSUED}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID}


feign:
  catalog:
    product:
      api:
        baseurl: ${CATALOG_PRODUCT_API_BASE_URL}
    offer:
      api:
        baseurl: ${CATALOG_OFFER_API_BASE_URL}

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true

logging:
  level:
    root: debug
